package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"
	"errors"
	"fmt"
	"strconv"

	"github.com/aereal/enjoy-opentelemetry/graph"
	"github.com/aereal/enjoy-opentelemetry/graph/models"
	"github.com/go-sql-driver/mysql"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/trace"
)

// Node is the resolver for the node field.
func (r *liverEdgeResolver) Node(ctx context.Context, obj *models.LiverEdge) (*models.Liver, error) {
	return obj.Liver, nil
}

// RegisterLiver is the resolver for the registerLiver field.
func (r *mutationResolver) RegisterLiver(ctx context.Context, name string) (bool, error) {
	values := struct {
		Name string `db:"name"`
	}{Name: name}
	_, err := r.dbx.NamedExecContext(ctx, "insert into livers (name) values (:name)", values)
	if err != nil {
		var merr *mysql.MySQLError
		if errors.As(err, &merr) {
			span := trace.SpanFromContext(ctx)
			span.SetAttributes(attribute.String("mysql.errors.number", strconv.FormatUint(uint64(merr.Number), 10)))
		}
		return false, fmt.Errorf("NamedExecContext: %w", err)
	}
	return true, nil
}

// Liver is the resolver for the liver field.
func (r *queryResolver) Liver(ctx context.Context, name string) (*models.Liver, error) {
	var liver models.Liver
	if err := r.dbx.GetContext(ctx, &liver, "select * from livers where name = ? limit 1", name); err != nil {
		return nil, fmt.Errorf("GetContext: %w", err)
	}
	return &liver, nil
}

// Livers is the resolver for the livers field.
func (r *queryResolver) Livers(ctx context.Context, first *int, after *string, orderBy *models.LiverOrder) (*models.LiverConnection, error) {
	if first == nil || *first <= 0 {
		return &models.LiverConnection{
			PageInfo: models.NewPageInfo[*models.LiverEdge](nil, 0),
		}, nil
	}
	firstInt := *first
	if orderBy == nil {
		orderBy = &models.LiverOrder{
			Field:     models.LiverOrderFieldDatabaseID,
			Direction: models.OrderDirectionAsc,
		}
	}
	cursor := models.EmptyLiverCursor()
	if after != nil {
		var err error
		cursor, err = models.NewLiverCursorFrom(*after)
		if err != nil {
			return nil, err
		}
	}
	limit := firstInt + 1
	edges := make([]*models.LiverEdge, 0, limit)
	args := make([]any, 0, 1)
	query := fmt.Sprintf(`select * from livers %s limit %d`, toOrderBy(orderBy), limit)
	if !cursor.IsEmpty() {
		query = fmt.Sprintf(`select * from livers where liver_id > ? %s limit %d`, toOrderBy(orderBy), limit)
		args = []any{cursor.LiverID}
	}
	if err := r.dbx.SelectContext(ctx, &edges, query, args...); err != nil {
		return nil, fmt.Errorf("SelectContext: %w", err)
	}
	conn := &models.LiverConnection{
		Edges:    models.NewEdges(edges, firstInt),
		PageInfo: models.NewPageInfo(edges, firstInt),
	}
	return conn, nil
}

// LiverEdge returns graph.LiverEdgeResolver implementation.
func (r *Resolver) LiverEdge() graph.LiverEdgeResolver { return &liverEdgeResolver{r} }

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type liverEdgeResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
