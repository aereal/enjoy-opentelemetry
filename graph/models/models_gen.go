// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
)

type LiverConnection struct {
	Edges    []*LiverEdge `json:"edges"`
	PageInfo *PageInfo    `json:"pageInfo"`
}

type LiverOrder struct {
	Field     LiverOrderField `json:"field"`
	Direction OrderDirection  `json:"direction"`
}

type PageInfo struct {
	HasPreviousPage bool    `json:"hasPreviousPage"`
	HasNextPage     bool    `json:"hasNextPage"`
	StartCursor     *Cursor `json:"startCursor"`
	EndCursor       *Cursor `json:"endCursor"`
}

type LiverOrderField string

const (
	LiverOrderFieldDatabaseID LiverOrderField = "DATABASE_ID"
)

var AllLiverOrderField = []LiverOrderField{
	LiverOrderFieldDatabaseID,
}

func (e LiverOrderField) IsValid() bool {
	switch e {
	case LiverOrderFieldDatabaseID:
		return true
	}
	return false
}

func (e LiverOrderField) String() string {
	return string(e)
}

func (e *LiverOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LiverOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LiverOrderField", str)
	}
	return nil
}

func (e LiverOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OrderDirection string

const (
	OrderDirectionAsc  OrderDirection = "ASC"
	OrderDirectionDesc OrderDirection = "DESC"
)

var AllOrderDirection = []OrderDirection{
	OrderDirectionAsc,
	OrderDirectionDesc,
}

func (e OrderDirection) IsValid() bool {
	switch e {
	case OrderDirectionAsc, OrderDirectionDesc:
		return true
	}
	return false
}

func (e OrderDirection) String() string {
	return string(e)
}

func (e *OrderDirection) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderDirection", str)
	}
	return nil
}

func (e OrderDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
